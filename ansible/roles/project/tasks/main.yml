---

- name: Check if needed variables are defined
  assert:
    that:
      - app_name is defined
      - app_path is defined
      - app_user is defined
      - app_group is defined
      - app_ecto_repo is defined
      - app_deploy_eval is defined
      - app_git is defined
      - app_http_port is defined
      - app_domain is defined
      - app_log_path is defined
      - app_secret_key is defined
      - erl_cookie is defined
      - app_git_repo is defined
      - app_git_path is defined
      #- stats_port is defined
      #- stats_server_ip is defined
    fail_msg: " 'item' is not defined or empty"

- name: Get todays date
  command: "date +'%d-%m-%Y'"
  register: run_date

- name: Ensure application user exists
  user:
    name: "{{ app_user }}"
    state: present
    shell: "/bin/bash"
    system: false

- name: Create application path
  file:
    path: "{{ app_path }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: "{{ app_user }}"

- name: Create application log path
  file:
    path: "{{ app_log_path }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: "{{ app_user }}"

- name: Create application git path
  file:
    path: "{{ app_git_path }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: "{{ app_user }}"

- name: Clone the git repository
  git:
    repo: "{{ app_git_repo }}"
    dest: "{{ app_git_path }}"
    version: "main"

- name: Pull the latest changes from the git repository
  git:
    repo: "{{ app_git_repo }}"
    dest: "{{ app_git_path }}"
    version: "main"
    force: true

- name: Make application release
  command: "make release"
  cwd: "{{ app_git_path }}"
  environment:
    MIX_ENV: prod
    MIX_ARCHIVE_FORMAT: tar.gz
    MIX_ARCHIVE_NAME: "{{ app_name }}"

- name: Extract application release
  unarchive:
    remote_src: true
    src: "{{ app_git_path }}/release/{{ app_name }}.tar.gz"
    dest: "{{ app_path }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"

- name: Set application user as owner for extracted files
  file:
    dest: "{{ app_path }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    recurse: true

- name: Create needed directories for configs and data
  file:
    path: "{{ app_path }}/{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
  with_items:
    - "etc"
    - "data"

- name: Add applications env file to systemd
  become: true
  template:
    src: env.j2
    dest: "{{ app_path }}/etc/env"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: 0644
  notify: systemd daemon reload

- name: Generate setup systemd services for apps
  become: true
  template:
    src: app-setup.service.j2
    dest: "/usr/lib/systemd/system/app-setup.service"
    mode: 0644
  notify: systemd daemon reload

- name: Enable and start setup services
  systemd:
    name: "app-setup.service"
    state: started
    enabled: yes
    daemon_reload: yes

- name: Generate deploy systemd services for apps
  become: true
  template:
    src: app-deploy.service.j2
    dest: "/usr/lib/systemd/system/app-deploy.service"
    mode: 0644

- name: Enable deploy services
  systemd:
    name: "deploy-{{ item.name }}.service"
    state: started
    enabled: yes
    daemon_reload: yes

- name: Add application's systemd file
  become: true
  template:
    src: "app.service.j2"
    dest: "/usr/lib/systemd/system/{{ app_name }}.service"
    mode: 0644
  notify: systemd daemon reload

- name: Stop application service
  become: true
  service:
    name: "{{ app_name }}"
    enabled: true
    state: stopped

- name: Start application service
  become: true
  service:
    name: "{{ app_name }}"
    enabled: true
    state: started
