---

- name: Check if needed variables are defined
  assert:
    that:
      - app_name is defined
      - app_path is defined
      - app_user is defined
      - app_group is defined
      - app_ecto_repo is defined
      - app_deploy_eval is defined
      - app_git is defined
      - app_http_port is defined
      - app_domain is defined
      - app_log_path is defined
      - app_secret_key is defined
      - erl_cookie is defined
      - stats_port is defined
      - stats_server_ip is defined
    fail_msg: " 'item' is not defined or empty"

- name: Get todays date
  command: "date +'%d-%m-%Y'"
  register: run_date

- name: Install needed packages
  become: true
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - apache2-utils
    - python3-passlib
    - rsync

- name: Ensure application user exists
  become: true
  user:
    name: "{{ app_user }}"
    state: present
    shell: "/bin/bash"
    system: false

- name: Create application path
  become: true
  file:
    path: "{{ app_path }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: "{{ app_user }}"

- name: Create application log path
  become: true
  file:
    path: "{{ app_log_path }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: "{{ app_user }}"

- name: Copy application artefact to remote host
  become: true
  copy:
    src: "../release/{{ app_name }}.tar.gz"
    dest: /tmp/

- name: Extract application distribution
  become: true
  unarchive:
    remote_src: true
    src: "/tmp/{{ app_name }}.tar.gz"
    dest: "{{ app_path }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"

- name: Set application user as owner for extracted files
  become: true
  file:
    dest: "{{ app_path }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    recurse: true

- name: Create needed directories for configs and data
  become: true
  file:
    path: "{{ app_path }}/{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
  with_items:
    - "etc"
    - "data"

- name: Copy geo ip database to remote host
  become: true
  copy:
    src: "{{ geoip_path }}/GeoIP2-City.mmdb"
    dest: /tmp/
  when: geoip_path is defined

- name: Copy geo ip db to data directory
  become: true
  copy:
    src: "/tmp/GeoIP2-City.mmdb"
    dest: "{{ app_path }}/data"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    remote_src: true
    mode: 0644
  when: geoip_path is defined

- name: Check that the private key exists
  stat:
    path: "{{ app_path }}/etc/key.pem"
  register: key

- name: Create ssh private key for application
  become: true
  command: "openssl genrsa -out {{ app_path }}/etc/key.pem 2048"
  when: not key.stat.exists

- name: Create ssl config for CSRs
  become: true
  template:
    src: "ssl.conf.j2"
    dest: "{{ app_path }}/etc/ssl.conf"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: 0644

- name: Create CSR for application
  become: true
  command: "openssl req -new -sha256 -key {{ app_path }}/etc/key.pem -out {{ app_path }}/etc/request.csr -config {{ app_path }}/etc/ssl.conf"

- name: Read CSR contents
  command: "cat {{ app_path }}/etc/request.csr"
  register: csr_output

- name: Print CSR output
  debug:
    msg: "{{ csr_output.stdout | replace('\n', '') }}"

- name: Concatenate https certs and write to a new file when specified
  become: true
  copy:
    content: "{% for item in files %}{{ lookup('file', item) }}\n{% endfor %}"
    dest: "{{ app_path }}/etc/{{ app_user }}-{{ run_date.stdout }}.pem"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: 0644
  vars:
    files:
      - "{{ app_ca_path }}/{{ app_user }}.crt"
      - "{{ app_ca_path }}/{{ app_user }}.ca-bundle"
  when: app_ca_path is defined

- name: Remove old certificate link
  become: true
  file:
    path: "{{ app_path }}/etc/ca.pem"
    state: absent
  when: app_ca_path is defined

- name: Link new ceritifcate for nginx
  become: true
  file:
    src: "{{ app_path }}/etc/{{ app_user }}-{{ run_date.stdout }}.pem"
    dest: "{{ app_path }}/etc/ca.pem"
    state: link
  when: app_ca_path is defined

- name: Remove unneded nginx configuration
  become: true
  file:
    path: "/etc/nginx/conf.d/no-ssl.default.conf"
    state: absent

- name: Add or update user in .htpasswd
  become: true
  htpasswd:
    path: /etc/nginx/.htpasswd
    name: prometheus
    password: "{{ stats_password }}"
    mode: 0644
    create: yes
  when: stats_password is defined

- name: Copy nginx configuration for application
  become: true
  template:
    src: "project-nginx.conf.j2"
    dest: "/etc/nginx/conf.d/{{ app_user }}.conf"
    mode: 0644
  notify: reload nginx

- name: Install required app's packages
  package:
    name: "{{ item.package }}"
    state: present
  loop: "{{ app_required_packages }}"

- name: Add applications env file to systemd
  become: true
  template:
    src: env.j2
    dest: "{{ app_path }}/etc/env"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: 0644
  notify: systemd daemon reload

- name: Generate setup systemd services for apps
  become: true
  template:
    src: app-setup.service.j2
    dest: "/usr/lib/systemd/system/app-setup.service"
    mode: 0644
  notify: systemd daemon reload

- name: Enable and start setup services
  systemd:
    name: "app-setup.service"
    state: started
    enabled: yes
    daemon_reload: yes

- name: Generate deploy systemd services for apps
  become: true
  template:
    src: app-deploy.service.j2
    dest: "/usr/lib/systemd/system/app-deploy.service"
    mode: 0644

- name: Enable deploy services
  systemd:
    name: "deploy-{{ item.name }}.service"
    state: started
    enabled: yes
    daemon_reload: yes

- name: Add application's systemd file
  become: true
  template:
    src: "app.service.j2"
    dest: "/usr/lib/systemd/system/{{ app_name }}.service"
    mode: 0644
  notify: systemd daemon reload

- name: Stop application service
  become: true
  service:
    name: "{{ app_name }}"
    enabled: true
    state: stopped

- name: Start application service
  become: true
  service:
    name: "{{ app_name }}"
    enabled: true
    state: started
